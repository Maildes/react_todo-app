{"version":3,"sources":["components/TodoInput/TodoInput.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","constants.js","components/FilterList/FilterList.js","components/Footer/Footer.js","App.js","index.js"],"names":["TodoInput","state","title","getKey","Math","random","handleSubmitTodo","event","preventDefault","todo","id","complete","props","addTodo","setState","handleInputChange","value","target","trim","this","onSubmit","type","className","placeholder","onChange","React","Component","TodoItem","editing","deleteTodo","changeStatus","completed","classNames","checked","onClick","htmlFor","TodoList","visibleTodos","map","key","PureComponent","FILTER_TYPES","all","active","FilterList","setFilter","selectedTodos","Object","values","filter","href","selected","Footer","todos","onClearCompleted","completedTodos","length","selectedFilter","some","App","toggleAllTodoStatus","filterTodos","handleClearCompleted","every","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e31c307.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoInput extends React.Component {\n  state = {\n    title: '',\n  };\n\n  getKey = () => (Math.random() * 100);\n\n  handleSubmitTodo = (event) => {\n    event.preventDefault();\n\n    if (this.state.title !== '') {\n      const todo = {\n        title: this.state.title,\n        id: `${this.getKey()}`,\n        complete: false,\n      };\n\n      this.props.addTodo(todo);\n\n      this.setState({\n        title: '',\n      });\n    }\n  }\n\n  handleInputChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      title: value.trim(),\n    });\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmitTodo}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={this.handleInputChange}\n        />\n      </form>\n    );\n  }\n}\n\nTodoInput.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nclass TodoItem extends React.Component {\n  state = {\n    editing: false,\n  };\n\n  render() {\n    const { todo, deleteTodo, changeStatus } = this.props;\n    const { id, title, completed } = todo;\n    const { editing } = this.state;\n\n    return (\n      <li\n        className={classNames({\n          completed,\n          editing,\n        })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={completed}\n            id={id}\n            onClick={() => changeStatus(id)}\n          />\n          <label htmlFor={id}>{title}</label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => deleteTodo(id)}\n          />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from '../TodoItem/TodoItem';\n\nclass TodoList extends React.PureComponent {\n  render() {\n    const {\n      deleteTodo,\n      changeStatus,\n      visibleTodos,\n    } = this.props;\n\n    return (\n      <ul className=\"todo-list\">\n        {visibleTodos.map(todo => (\n          <TodoItem\n            todo={todo}\n            key={todo.id}\n            changeStatus={changeStatus}\n            deleteTodo={deleteTodo}\n          />\n        ))\n        }\n      </ul>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  visibleTodos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","export const FILTER_TYPES = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FILTER_TYPES } from '../../constants';\n\nexport const FilterList = ({ setFilter, selectedTodos }) => (\n  <ul className=\"filters\">\n    {Object.values(FILTER_TYPES).map(filter => (\n      <li key={filter} className=\"filter\">\n        <a\n          href={`#/${filter}`}\n          className={classNames('filter-link', {\n            selected: selectedTodos === filter,\n          })}\n          onClick={() => setFilter(filter)}\n        >\n          {filter}\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nFilterList.propTypes = {\n  selectedTodos: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FilterList } from '../FilterList/FilterList';\n\nexport const Footer = (\n  { selectedTodos, todos, setFilter, onClearCompleted },\n) => {\n  const completedTodos = todos.filter(todo => !todo.completed).length;\n\n  return todos.length > 0 ? (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${completedTodos} items left`}\n      </span>\n\n      <FilterList\n        setFilter={setFilter}\n        selectedFilter={selectedTodos}\n      />\n\n      {todos.some(todo => todo.completed) && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={onClearCompleted}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  )\n    : '';\n};\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  selectedTodos: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  onClearCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport TodoInput from './components/TodoInput/TodoInput';\nimport TodoList from './components/TodoList/TodoList';\nimport { Footer } from './components/Footer/Footer';\nimport { FILTER_TYPES } from './constants';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedTodos: FILTER_TYPES.all,\n  };\n\n  addTodo = (todo) => {\n    const { todos } = this.state;\n\n    this.setState(state => ({\n      todos: [...todos, todo],\n    }));\n  }\n\n  deleteTodo = (id) => {\n    const { todos } = this.state;\n\n    this.setState(() => ({\n      todos: todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  changeStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  toggleAllTodoStatus = ({ target }) => {\n    this.setState(({ todos }) => ({\n      todos: todos.map(todo => ({\n        ...todo,\n        completed: target.checked,\n      })),\n    }));\n  }\n\n  setFilter = (filter) => {\n    this.setState({ selectedTodos: filter });\n  }\n\n  filterTodos = () => {\n    const { selectedTodos, todos } = this.state;\n\n    switch (selectedTodos) {\n      case FILTER_TYPES.active:\n        return todos.filter(todo => !todo.completed);\n      case FILTER_TYPES.completed:\n        return todos.filter(todo => todo.completed);\n      case FILTER_TYPES.all:\n        return todos.filter(todo => todo.id);\n      default:\n        return todos;\n    }\n  };\n\n  handleClearCompleted = () => {\n    this.setState(state => ({\n      todos: state.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  render() {\n    const { todos, selectedTodos } = this.state;\n    const visibleTodos = this.filterTodos(selectedTodos);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <TodoInput addTodo={this.addTodo} />\n        </header>\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.toggleAllTodoStatus}\n            checked={todos.every(todo => todo.completed)}\n          />\n          {todos.length > 0 && (\n            <label\n              htmlFor=\"toggle-all\"\n            >\n              Mark all as complete\n            </label>\n          )}\n\n          <TodoList\n            todos={todos}\n            visibleTodos={visibleTodos}\n            deleteTodo={this.deleteTodo}\n            changeStatus={this.changeStatus}\n            // editTodo={this.editTodo}\n            // editCurrentTitle={this.editCurrentTitle}\n            // handleEditingTitle={this.handleEditingTitle}\n          />\n        </section>\n        <Footer\n          todos={todos}\n          setFilter={this.setFilter}\n          selectedTodos={selectedTodos}\n          onClearCompleted={this.handleClearCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './base.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}