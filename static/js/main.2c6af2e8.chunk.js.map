{"version":3,"sources":["components/TodoInput/TodoInput.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","constants.js","components/FilterList/FilterList.js","components/Footer/Footer.js","App.js","index.js"],"names":["TodoInput","state","title","getKey","Math","random","handleSubmitTodo","event","preventDefault","todo","id","complete","props","addTodo","setState","handleInputChange","value","target","trim","this","onSubmit","type","className","placeholder","onChange","React","Component","TodoItem","editing","handleTitleEditing","key","itemId","onEditTodo","deleteTodo","acceptEditing","setEditingMode","bool","changeStatus","completed","classNames","checked","onClick","htmlFor","onDoubleClick","defaultValue","onBlur","onKeyDown","TodoList","visibleTodos","map","PureComponent","FILTER_TYPES","all","active","FilterList","setFilter","selectedTodos","Object","values","filter","href","selected","Footer","todos","onClearCompleted","completedTodos","length","selectedFilter","some","App","editTodo","toggleAllTodoStatus","filterTodos","handleClearCompleted","every","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c6af2e8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoInput extends React.Component {\n  state = {\n    title: '',\n  };\n\n  getKey = () => (Math.random() * 100);\n\n  handleSubmitTodo = (event) => {\n    event.preventDefault();\n\n    if (this.state.title !== '') {\n      const todo = {\n        title: this.state.title,\n        id: `${this.getKey()}`,\n        complete: false,\n      };\n\n      this.props.addTodo(todo);\n\n      this.setState({\n        title: '',\n      });\n    }\n  }\n\n  handleInputChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      title: value.trim(),\n    });\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmitTodo}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={this.handleInputChange}\n        />\n      </form>\n    );\n  }\n}\n\nTodoInput.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nclass TodoItem extends React.Component {\n  state = {\n    editing: false,\n  };\n\n  handleTitleEditing = ({ target, key, type }) => {\n    const { itemId, onEditTodo, deleteTodo } = this.props;\n    const value = target.value.trim();\n    const acceptEditing = (key === 'Enter' || type === 'blur');\n\n    if (acceptEditing && value) {\n      onEditTodo(itemId, value);\n      this.setEditingMode(false);\n    }\n\n    if (acceptEditing && !value) {\n      deleteTodo(itemId);\n      this.setEditingMode(false);\n    }\n\n    if (key === 'Escape') {\n      this.setEditingMode(false);\n    }\n  }\n\n  setEditingMode = (bool) => {\n    this.setState({ editing: bool });\n  }\n\n  render() {\n    const { todo, deleteTodo, changeStatus } = this.props;\n    const { id, title, completed } = todo;\n    const { editing } = this.state;\n\n    return (\n      <li\n        className={classNames({\n          completed,\n          editing,\n        })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={completed}\n            id={id}\n            onClick={() => changeStatus(id)}\n          />\n          <label\n            htmlFor={id}\n            onDoubleClick={() => this.setEditingMode(true)}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => deleteTodo(id)}\n          />\n        </div>\n        {editing && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            defaultValue={title}\n            onBlur={this.handleTitleEditing}\n            onKeyDown={this.handleTitleEditing}\n          />\n        )}\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  itemId: PropTypes.number.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  onEditTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from '../TodoItem/TodoItem';\n\nclass TodoList extends React.PureComponent {\n  render() {\n    const {\n      deleteTodo,\n      changeStatus,\n      visibleTodos,\n      onEditTodo,\n    } = this.props;\n\n    return (\n      <ul className=\"todo-list\">\n        {visibleTodos.map(todo => (\n          <TodoItem\n            todo={todo}\n            key={todo.id}\n            itemId={todo.id}\n            changeStatus={changeStatus}\n            deleteTodo={deleteTodo}\n            onEditTodo={onEditTodo}\n          />\n        ))\n        }\n      </ul>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  visibleTodos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  onEditTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","export const FILTER_TYPES = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FILTER_TYPES } from '../../constants';\n\nexport const FilterList = ({ setFilter, selectedTodos }) => (\n  <ul className=\"filters\">\n    {Object.values(FILTER_TYPES).map(filter => (\n      <li key={filter} className=\"filter\">\n        <a\n          href={`#/${filter}`}\n          className={classNames('filter-link', {\n            selected: selectedTodos === filter,\n          })}\n          onClick={() => setFilter(filter)}\n        >\n          {filter}\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nFilterList.propTypes = {\n  selectedTodos: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FilterList } from '../FilterList/FilterList';\n\nexport const Footer = (\n  { selectedTodos, todos, setFilter, onClearCompleted },\n) => {\n  const completedTodos = todos.filter(todo => !todo.completed).length;\n\n  return todos.length > 0 ? (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${completedTodos} items left`}\n      </span>\n\n      <FilterList\n        setFilter={setFilter}\n        selectedFilter={selectedTodos}\n      />\n\n      {todos.some(todo => todo.completed) && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={onClearCompleted}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  )\n    : '';\n};\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  selectedTodos: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  onClearCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport TodoInput from './components/TodoInput/TodoInput';\nimport TodoList from './components/TodoList/TodoList';\nimport { Footer } from './components/Footer/Footer';\nimport { FILTER_TYPES } from './constants';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedTodos: FILTER_TYPES.all,\n  };\n\n  addTodo = (todo) => {\n    const { todos } = this.state;\n\n    this.setState(state => ({\n      todos: [...todos, todo],\n    }));\n  }\n\n  deleteTodo = (id) => {\n    const { todos } = this.state;\n\n    this.setState(() => ({\n      todos: todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  editTodo = (itemId, value) => {\n    this.setState(({ todos }) => ({\n      todos: todos.map((todo) => {\n        if (todo.id !== itemId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          title: value,\n        };\n      }),\n    }));\n  }\n\n  changeStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  toggleAllTodoStatus = ({ target }) => {\n    this.setState(({ todos }) => ({\n      todos: todos.map(todo => ({\n        ...todo,\n        completed: target.checked,\n      })),\n    }));\n  }\n\n  setFilter = (filter) => {\n    this.setState({ selectedTodos: filter });\n  }\n\n  filterTodos = () => {\n    const { selectedTodos, todos } = this.state;\n\n    switch (selectedTodos) {\n      case FILTER_TYPES.active:\n        return todos.filter(todo => !todo.completed);\n      case FILTER_TYPES.completed:\n        return todos.filter(todo => todo.completed);\n      case FILTER_TYPES.all:\n        return todos.filter(todo => todo.id);\n      default:\n        return todos;\n    }\n  };\n\n  handleClearCompleted = () => {\n    this.setState(state => ({\n      todos: state.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  render() {\n    const { todos, selectedTodos } = this.state;\n    const visibleTodos = this.filterTodos(selectedTodos);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <TodoInput addTodo={this.addTodo} />\n        </header>\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.toggleAllTodoStatus}\n            checked={todos.every(todo => todo.completed)}\n          />\n          {todos.length > 0 && (\n            <label\n              htmlFor=\"toggle-all\"\n            >\n              Mark all as complete\n            </label>\n          )}\n\n          <TodoList\n            todos={todos}\n            visibleTodos={visibleTodos}\n            deleteTodo={this.deleteTodo}\n            changeStatus={this.changeStatus}\n            onEditTodo={this.editTodo}\n          />\n        </section>\n        <Footer\n          todos={todos}\n          setFilter={this.setFilter}\n          selectedTodos={selectedTodos}\n          onClearCompleted={this.handleClearCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './base.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}